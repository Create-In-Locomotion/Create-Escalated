plugins {
    id "architectury-plugin" version "3.4.+"
    id "dev.architectury.loom" version "1.7.+" apply false
}

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/create-in-locomotion/create-escalated")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
            maven {
                name = "realRobotixMaven"
                url = uri("https://maven.realrobotix.me/escalated")
                credentials(PasswordCredentials)
            }
            mavenLocal()
        }
        publications {
            mavenJava(MavenPublication) {
                artifact remapJar
                artifact remapSourcesJar
                group = maven_group
                artifactId = property('mod.id')
            }
        }
    }

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings

        // mavens used on both forge and fabric
        maven { url = "https://maven.blamejared.com/" } // JEI
        maven { url = "https://maven.tterrag.com/" } // Flywheel on both, Create and Registrate on forge
    }

    dependencies {
        minecraft "com.mojang:minecraft:$minecraft_version"
        // Can't use parchment for some reason, game ends up completely unmapped
        mappings loom.officialMojangMappings()

        // see each subproject for more dependencies.
    }

    tasks.register("buildAndCollect", Copy) {
        group = "build"
        from tasks.remapJar.archiveFile, tasks.remapSourcesJar.archiveFile
        into rootProject.layout.buildDirectory.file("libs/${rootProject.property('mod.version')}/${project.name}")
        dependsOn "build"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base.archivesName = property('mod.id')
    group = maven_group

    // Formats the mod version to include the loader, Minecraft version, and build number (if present)
    // example: 1.0.0+fabric-1.18.2-build.100
    def ci = System.getenv("CI")?.toBoolean() ?: false
    def release = System.getenv("RELEASE")?.toBoolean() ?: false
    def nightly = ci && !release
    def buildNumber = System.getenv("GITHUB_RUN_NUMBER") ? System.getenv("GITHUB_RUN_NUMBER").toInteger() : null
    version = "${property('mod.version')}+mc.${minecraft_version}-${project.name}${nightly ? "-build.${buildNumber}" : ""}${!ci ? "-dev" : ""}"

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    java {
        withSourcesJar()
    }
}
